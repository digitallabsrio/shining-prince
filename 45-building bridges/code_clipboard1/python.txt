# function to recursively calculate the length the longest
# increasing subsequence from the northern sorted values
def max_bridges_rec_count(nums, curr, prev, dp):
    # if 'curr' reaches the length of the array, then return 0
    if curr == len(nums):
        return 0

    if dp[curr][prev + 1] != -1:
        return dp[curr][prev + 1]
	
    # calculate the LIS length from 'curr + 1'
    length = max_bridges_rec_count(nums, curr + 1, prev, dp)
    # if previous value is negative or is less than the 
    # current value, then we will include it
    if prev < 0 or nums[prev] < nums[curr]:
        length = max(length, 1 + max_bridges_rec_count(nums, curr + 1, curr, dp))
	
    dp[curr][prev + 1] = length
    return dp[curr][prev + 1]


# function to find the maximum number of bridges that can be built
def max_bridges_count(north, south):
    n = len(north)
    # making pairs by joining the north and south arrays
    pairs = list(zip(north, south))
    # sorting the pairs according to the southern values
    pairs.sort(key = lambda x:(x[1], x[0]))
    # Since southern values are sorted, we will extract the northern values
    memo_north = [pairs[i][0] for i in range(n)]
    # 2-D table for memoization of size (n x n)
    dp = [[-1 for j in range(n + 1)] for i in range(n + 1)]

    return max_bridges_rec_count(memo_north, 0, -1, dp)


# Driver code
def main():
    north = [[8, 10, 5, 2], [6, 4, 2, 1], [8, 1, 4, 3, 5,
                                           2, 6, 7], [6, 2, 8, 7, 4, 6, 3], [8, 2, 6, 7, 2]]
    south = [[1, 2, 4, 6], [2, 3, 6, 5], [1, 2, 3, 4, 5, 6, 7, 8],
             [1, 9, 2, 5, 3, 4, 2], [1, 6, 2, 9, 6]]

    # Let's uncomment this and check the effect of dynamic programming using memoization

    # testcase_north = [13730, 94589, 55799, 99508, 33168, 54541, 75826, 71913, 79037, 49914, 48922, 18911, 57477, 72764, 19856, 59150, 72470, 94022, 50542, 45288, 43701, 4212, 20211, 47947, 41407, 80651, 24949, 2961, 10729, 86325, 92265, 31471, 72066, 47744, 13746, 24926, 1515, 36770, 36426, 61485, 3856, 41433, 3962, 89474, 41604, 38301, 58712, 99327, 23494, 60097, 85798, 21367, 26844, 75283, 5874, 41329, 810, 92707, 1054, 69102, 88307, 43770, 73188, 90168, 24745, 58449, 50808, 50272, 37320, 65055, 73907, 79778, 46253, 22032, 66743, 28113, 48550, 48005, 7925, 29442, 10108, 77692, 86392, 67035, 49267, 93088, 57231, 76784, 34595, 51858, 99365, 83959, 75259, 45943, 53612, 37141, 30764, 96921, 34526, 81898, 62086, 35050, 14393, 37441, 10690, 18077, 44376, 47614, 59280, 99017, 29393, 1336, 96352, 79479, 38087, 20439, 34334, 69289, 64053, 87758, 90774, 77574, 24079, 42141, 87557, 82671, 49093, 56264, 53459, 29659, 16730, 15134, 65965, 97108, 74765, 77023, 93791, 67585, 18783, 44697, 51481, 36763, 79853, 33376, 42827, 68174, 73924, 68861, 49721, 79114, 25445, 97365, 29612, 28547, 17028, 4401, 37915, 44823, 89587, 25993, 34704, 88345, 55444, 59724, 36210, 32373, 53432, 42941, 52313, 87475, 32927, 98991, 177, 36199, 12669, 97947, 8025, 62270, 71123, 89021, 21123, 31589, 14452, 17036, 16601, 22531, 62313, 74715, 39855, 14739, 14958, 72985, 43464, 80544, 31502, 20648, 75777, 55385, 68750, 59777, 49857, 47235, 52407, 23435, 55301, 93546, 42651, 64496, 47379, 23062, 2381, 94035, 11300, 95816, 37904, 6731, 82746, 94939, 23754, 31153, 96260, 95510, 52364, 94786, 5628, 18047, 71380, 70336, 61403, 67791, 24429, 95888, 92014, 14903, 93746, 71089, 45910, 76982, 75447, 31862, 91733, 4319, 8314, 16770, 30137, 80033, 52668, 68655, 87976, 30588, 52904, 42372, 60907, 55418, 60008, 83263, 61270, 34035, 97030, 51322, 4676, 7576, 47946, 87677, 52768, 24235, 91203, 31174, 74655, 92988, 37951, 90450, 8568, 14321, 42550, 88611, 19519, 36993, 1758, 62978, 61272, 61926, 3442, 91439, 50323, 28281, 42772, 38454, 80944, 95468, 94822, 53220, 23977, 96934, 12508, 49975, 74379, 94537, 86286, 66997, 58557, 16267, 51962, 77264, 96528, 33357, 66593, 20072, 30010, 90194, 23803, 26500, 20138, 39836, 82996, 36533, 81390, 21967, 91179, 75517, 43377, 91056, 23860, 47959, 46996, 80616, 16286, 8963, 84706, 54793, 90142, 12109, 31292, 90252, 45461, 2075, 54240, 98405, 51274, 79318, 30763, 59109, 98605, 60174, 12482, 15491, 98600, 96251, 41817, 74611, 67539, 76954, 87161, 98711, 88247, 6165, 29665, 30759, 57551, 57398, 97115, 40612, 40421, 82188, 32749, 21731, 22907, 93714, 56248, 42419, 84327, 41699, 80098, 70108, 99199, 87560, 64834, 78377, 81721, 65734, 74378, 63232, 58148, 38469, 79559, 49336, 79421, 91400, 15240, 67662, 15262, 13051, 76165, 8662, 32038, 15632, 48721, 25638, 13270, 93599]
    # testcase_south = [51616, 65956, 5357, 76326, 47065, 10560, 92107, 29943, 2644, 40379, 41309, 57856, 18779, 57089, 7558, 27182, 68713, 81482, 5119, 35425, 67758, 24115, 13883, 95206, 65691, 70572, 38700, 5212, 31742, 48428, 90433, 98727, 44048, 2926, 14103, 7171, 77061, 5990, 33542, 42565, 3900, 47927, 54516, 1246, 24127, 92369, 48797, 80466, 45196, 14042, 78200, 45897, 7358, 54969, 61565, 34960, 91168, 42210, 63781, 42065, 39850, 79215, 423, 48736, 30030, 96660, 9253, 63396, 90362, 8801, 64679, 48368, 61672, 3581, 64805, 28305, 76767, 65259, 48901, 35741, 17346, 87669, 12001, 73571, 52569, 93917, 44856, 18791, 47653, 65487, 87143, 70506, 29563, 18999, 18902, 94926, 52502, 68306, 91076, 1051, 20745, 74420, 76412, 95573, 58606, 15785, 86496, 58984, 5370, 40371, 52571, 35251, 39331, 42382, 17308, 61101, 2401, 25231, 2550, 62578, 98137, 93782, 30609, 31209, 76128, 81335, 70614, 43045, 64144, 47500, 89285, 32497, 19443, 30997, 37470, 9261, 61992, 74308, 76073, 43829, 18894, 10313, 26521, 44477, 8592, 18357, 7875, 97409, 84265, 606, 17055, 71252, 31486, 89507, 45158, 55925, 45893, 16020, 39320, 35075, 3761, 909, 23081, 37826, 25538, 79547, 93053, 73144, 82077, 54112, 89430, 12198, 16910, 5136, 41903, 53974, 90270, 77255, 54123, 1147, 87878, 77760, 42706, 39178, 37068, 11414, 48495, 79249, 58214, 78561, 22098, 48385, 18619, 13462, 57763, 24057, 69287, 48775, 60389, 89025, 63598, 15326, 38433, 89430, 87124, 23728, 30924, 18702, 205, 69146, 12257, 5967, 11701, 64017, 64148, 82786, 17404, 61439, 94587, 27907, 95195, 21855, 5157, 56764, 37578, 79812, 67630, 28689, 33742, 75504, 25458, 3541, 35601, 61728, 34357, 71917, 4275, 9978, 15089, 29178, 10704, 31270, 63082, 80069, 26825, 86129, 35610, 79515, 9916, 60742, 77627, 89239, 17827, 76902, 86392, 65480, 66739, 5122, 30507, 73087, 97872, 83428, 7576, 66439, 28755, 91891, 512, 82246, 84319, 89183, 14443, 82834, 36431, 14075, 86487, 1363, 9649, 39851, 94011, 95047, 45370, 67213, 66952, 55587, 49359, 67967, 17315, 93445, 7694, 56346, 15376, 98767, 40939, 91688, 69963, 97164, 68790, 80756, 43379, 46853, 8555, 71805, 98634, 75309, 8123, 41335, 39755, 56609, 31909, 62738, 82700, 91388, 20564, 24426, 46271, 40949, 26033, 84964, 20206, 34218, 55640, 27024, 34875, 49976, 31765, 38550, 54208, 55424, 92842, 97914, 25597, 68192, 4807, 20608, 85406, 63667, 53717, 66913, 29321, 93405, 63259, 34386, 36555, 74611, 30354, 83605, 21204, 91889, 99294, 43671, 31537, 40477, 41150, 4470, 98630, 56775, 17020, 24946, 84384, 30065, 2828, 10755, 40009, 79767, 16617, 9739, 40762, 85242, 70641, 32954, 4169, 99471, 56821, 49505, 80635, 42695, 67251, 43383, 64738, 42040, 17291, 57152, 11442, 81726, 17469, 30118, 99858, 50150, 56543, 87474, 2026, 75601, 91560, 10445, 58895, 67526, 34510, 69487, 89769, 10007]
    # north.append(testcase_north)
    # south.append(testcase_south)

    for i in range(len(north)):
        print(i + 1, ".\t Input array north: ", north[i], sep="")
        print("\t Input array south: ", south[i], sep="")
        print("\t Maximum number of non-overlapping bridges = ",
              max_bridges_count(north[i], south[i]), sep="")
        print("-" * 100)


if __name__ == '__main__':
    main()