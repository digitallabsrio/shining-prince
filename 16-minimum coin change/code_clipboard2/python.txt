def coin_change(coins, total):
    if total < 1:
        return 0
    return calculate_minimum_coins(coins, total)
    
def calculate_minimum_coins(coins, rem):  
    # Helper function that calculates amount left to be calculated 
    # and tells what its value can be.
    dp = [rem+1] * (rem+1)
    dp[0] = 0 

    for i in range(1, rem+1):
      for c in coins:
        if i-c >= 0:
          dp[i] = min(dp[i], 1 + dp[i-c])
    
    if dp[rem] != (rem+1):
        return dp[rem]
    else:
        return -1

# Driver Code

def main():
    coins = [[1, 3, 4, 5],[1, 2, 3],[2, 3, 7],[1, 3, 9],[1, 4, 6, 9]]
    total = [7, 5, 1, 4, 11]

    # Let's uncomment this to see the benefit of using dynamic programming with tabulation

    # coins.append([34, 10, 415, 200])
    # total.append(610)

    for i in range(len(total)):
        print(str(i+1) + ".\tThe minimum number of coins required to find " + \
            str(total[i]) + " from " + str(coins[i]) + " is: " + \
                str(coin_change(coins[i], total[i])))
        print("-" * 100)

if __name__ == '__main__':
    main()