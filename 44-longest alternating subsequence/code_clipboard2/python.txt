def LAS(nums):

    n = len(nums)
    if n == 0:
        return 0
      
    # initialize dp with 1s as any sequence of length one is always the LAS
    dp =[[1 for _ in range(n)] for _ in range(2)]
    
    # iterate over all elements of nums
    for current in range(1, n):
        previous = current-1;
        
        # if the current element is greater than the previous element
        if nums[current] > nums[previous]:
            # current element can contribute to an ascending ordering
            # the ascending dp row value is updated by adding 1 to the length of the
            # longest descending subsequence till previous index
            dp[0][current] = 1 + dp[1][previous]
            # length of the longest descending subsequence is carried forward as it is
            dp[1][current] = dp[1][previous]
            
        # if the current element is less than the previous element
        elif nums[current] < nums[previous]: 
            # current element can contribute to a descending ordering
            # the descending dp row value is updated by adding 1 to the length of the
            # longest ascending subsequence till previous index
            dp[1][current] =  1 + dp[0][previous]
            # length of the longest ascending subsequence is carried forward as it is
            dp[0][current] = dp[0][previous]
            
        # if the current and previous elements are equal
        else:
            # carry forward the previous values
            dp[1][current] = dp[1][previous]
            dp[0][current] = dp[0][previous]
          
    # return maximum of the two final values
    return max(dp[1][n-1], dp[0][n-1])

# Driver code
def main():
    nums =[[1, 3, 2, 5], [1, 2, 3, 4], [4, 3, 2, 1], [5, 5, 5, 5, 5], [9, 6, 4, 5, 6, 3]]
    
    # Let's uncomment this to see the benefit of using dynamic programming with tabulation
    # nums.append([1, 6, 4, 8, 2, 9, 4, 1, 7, 11, 23, 65, 34, 23, 45, 34, 34, 32, 32, 21, 67, 89, 76, 77, 66, 44, 89, 0, 1, 2, 3, 5, 4, 2, 5, 6, 43, 2, 4, 5, 2, 55, 66, 1, 6, 4, 8, 2, 9, 4, 1, 7, 11, 23, 65, 34, 23, 45, 34, 34, 32, 32, 21, 67, 89, 76, 77, 66, 44, 89, 0, 1, 2, 3, 5, 4, 2, 5, 6, 43, 2, 4, 5, 2, 55, 66])

    for i in range(0, len(nums)):
        print(i+1, ".\tNums: ",nums[i], sep="")
        result = LAS(nums[i])
        print("\n\tThe Length of Longest Alternating Subsequence is: ", result, sep="")
        print("-"*100, "\n", sep="")


if __name__ == '__main__':
    main()