def find_strings_interleaving_memoization(s1, s2, s3, s1_index, s2_index, s3_index, table):

    # If we have reached the end of all the strings
    if s1_index == len(s1) and s2_index == len(s2) and s3_index == len(s3):
        return True

    # If we have reached the end of 's3' but 's1' or 's2' still has some characters left
    if s3_index == len(s3):
        return False

    # Setting up the key for this subproblem
    sub_problem = str(s1_index) + "/" + str(s2_index) + "/" + str(s3_index)
    if sub_problem not in table: # Checking if the sub problem is already solved
      d1 = False
      d2 = False
      # If s1 index and s3 index are pointing to the same character
      if s1_index < len(s1) and s1[s1_index] == s3[s3_index]:
          d1 = find_strings_interleaving_memoization(
              s1, s2, s3, s1_index + 1, s2_index, s3_index + 1, table)

      # If s2 index and s3 index are pointing to the same character
      if s2_index < len(s2) and s2[s2_index] == s3[s3_index]:
          d2 = find_strings_interleaving_memoization(
              s1, s2, s3, s1_index, s2_index + 1, s3_index + 1, table)

      table[sub_problem] = d1 or d2
    # If either of these starting decisions result in us verifying that s3 was indeed a product of
    # interleaving s1 and s2, than we will get True, otherwise False
    return table.get(sub_problem)


# The main function that initiates a recursive call to the helper function, however note that
# this time we also add an empty hash table as one of the parameters. 
def is_interleaving(s1, s2, s3):
    return find_strings_interleaving_memoization(s1, s2, s3, 0, 0, 0, {})

# Driver code:

def main():
    s1 = ["abd", "abc", "abcdef", "", "xyz", "abcdefghijklmnopqrstuvwxyz"]
    s2 = ["cef", "def", "mnop", "", "abc", "abcdefghijklmnopqrstuvwxyz"]
    s3 = ["adcbef", "abcccf", "mnaobcdepf", "", "abc", "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"]

    # Let's uncomment these three lines and check the effect of dynamic programming using memoization
    # s1.append("abcdefghijklmnopqrstuvwxyz")
    # s2.append("abcdefghijklmnopqrstuvwxyz")
    # s3.append("aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz")
    for i in range(len(s1)):
        print("Test Case #", i+1)
        print("The strings are:\ns1 = '", s1[i], "'\ns2 = '", s2[i], "'\ns3 = '", s3[i], "'", sep="")
        print("Is s3 a product of interleaving s1 and s2?")
        print(is_interleaving(s1[i], s2[i], s3[i]))
        print("-" * 100)


if __name__ == '__main__':
    main()