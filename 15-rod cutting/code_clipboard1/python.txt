def rod_cutting(lengths, prices, n):
    # Base case
    if len(prices) == 0 or len(prices) != len(lengths):
        return 0

    # Creating a lookup table of size len(lengths) x (n + 1)
    dp = [[-1 for _ in range(n+1)] for _ in range(len(lengths))]
    return rod_cutting_rec(lengths, prices, n, 0, dp)

# Helper function
def rod_cutting_rec(lengths, prices, n, curr, dp):
    # base case
    if n == 0 or curr == len(lengths):
        return 0

    # If a piece of size lengths[curr] is not already computed 
    # for a rod of length n, compute it
    if dp[curr][n] == -1:
        # Cut the piece of size length[curr]
        revenue1 = 0
        if lengths[curr] <= n:
            revenue1 = prices[curr] + rod_cutting_rec(lengths, prices, n - lengths[curr], curr, dp)

        # Don't cut the piece from the rod and move to the next available length
        revenue2 = rod_cutting_rec(lengths, prices, n, curr + 1, dp)
        
        # store the max in the lookup table
        dp[curr][n] = max(revenue1, revenue2)

    # return from the lookup table
    return dp[curr][n]

# Driver code
def main():
    n = [3, 4, 8, 4, 6]
    lengths = [
        [1, 2, 3],
        [2, 3, 4],
        [2, 1],
        [4, 3, 2, 1],
        [1, 2, 5, 4, 6],
    ]
    prices = [
        [7, 3, 8],
        [2, 7, 8],
        [20, 10],
        [1, 1, 1, 6],
        [2, 8, 9, 10, 11],
    ]
    
    # Let's uncomment this and check the effect of dynamic programming using memoization  

    # n.append(100)
    # prices.append([i for i in range(1, 200, 2)])
    # lengths.append([i for i in range(1, 101)])
    
    for i in range(len(n)):
        print(i + 1, ".\trod length: ", n[i], sep="")
        print("\tlengths: ", lengths[i])
        print("\tprices: ", prices[i])
        result = rod_cutting(lengths[i], prices[i], n[i])
        print("\tThe maximum profit found: ", result)
        print("-" * 100, sep="")


if __name__ == "__main__":
    main()