def rod_cutting(lengths, prices, n):
    lengthsCount = len(lengths)
    pricesCount = len(prices)
    
    # base cases
    if n == 0 or pricesCount == 0 or pricesCount != lengthsCount:
        return 0
    
    # Creating a lookup table of size len(lengths) x (n + 1)
    dp = [[0 for _ in range(n+1)] for _ in range(lengthsCount)]

    # process all rod lengths for all given lengths
    for curr in range(lengthsCount):
        for rod_length in range(1, n + 1):
            # Fetch the maximum revenue obtained by selling the rod
            # of size rod_length - lengths[curr]
            revenue1 = revenue2 = 0
            if lengths[curr] <= rod_length:
                revenue1 = prices[curr] + dp[curr][rod_length - lengths[curr]]
            
            # Fetch the maximum revenue obtained without cutting the rod
            if curr > 0:
                revenue2 = dp[curr - 1][rod_length]
            
            # store the result in the table
            dp[curr][rod_length] = max(revenue1, revenue2)

    # maximum revenue will be at the bottom-right corner.
    return dp[lengthsCount - 1][n]

# Driver code
def main():
    n = [3, 4, 8, 4, 6]
    lengths = [
        [1, 2, 3],
        [2, 3, 4],
        [2, 1],
        [4, 3, 2, 1],
        [1, 2, 5, 4, 6],
    ]
    prices = [
        [7, 3, 8],
        [2, 7, 8],
        [20, 10],
        [1, 1, 1, 6],
        [2, 8, 9, 10, 11],
    ]
    
    # Let's uncomment this and check the effect of dynamic programming using tabulation  

    # n.append(100)
    # prices.append([i for i in range(1, 200, 2)])
    # lengths.append([i for i in range(1, 101)])
    
    for i in range(len(n)):
        print(i + 1, ".\trod length: ", n[i], sep="")
        print("\tlengths: ", lengths[i])
        print("\tprices: ", prices[i])
        result = rod_cutting(lengths[i], prices[i], n[i])
        print("\tThe maximum profit found: ", result)
        print("-" * 100, sep="")


if __name__ == "__main__":
    main()