def find_LRS(str):
    return find_LRS_recursive(str, len(str), len(str))


def find_LRS_recursive(str, p1, p2):
    # Base case if any one index has reached end
    if (p1 == 0) or (p2 == 0):
        return 0

    # Characters are same but indexes are different
    if (str[p1 - 1] == str[p2 - 1]) and (p1 != p2):
        return find_LRS_recursive(str, p1 - 1, p2 - 1) + 1

    # Check if the characters at both indexes don't match
    return max(
        find_LRS_recursive(str, p1, p2 - 1), find_LRS_recursive(str, p1 - 1, p2)
    )


# Driver code
def main():
    inputs = ["abcd", "abddccd", "abbaba", "aaaaba", "abcdaeda"]

    # You can uncomment the line below and check how this recursive solution causes a time-out 
    # inputs.append("abcdefghijklmnopqrstuv")

    for i in range(len(inputs)):
        print(str(i + 1) + ". String: "+str(inputs[i]))
        print("Longest repeating subsequence is", find_LRS(inputs[i]))
        print("-" * 100, "\n", sep="")


if __name__ == "__main__":
    main()