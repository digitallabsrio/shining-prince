def count_ways(coins, amount):
  if amount == 0:     # base case 1
    return 1
  if amount <= 0:     # base case 2
    return 0

  # create and initialize the 2-D array
  dp = [[1 for _ in range(len(coins))] for _ in range(amount + 1)]

  # iterate over the 2-D array and update the values accordingly
  for amt in range(1, amount+1):
    for j in range(len(coins)):

      # keep the count of solutions including coins[j]
      coin = coins[j]
      if amt - coin >= 0: 
        x = dp[amt - coin][j]
      else:
        x = 0
        
      # keep the count of solutions excluding coins[j]
      if j >= 1:
        y = dp[amt][j-1]
      else:
        y = 0
      dp[amt][j] = x + y
  return dp[amount][len(coins) - 1]

def main():
    coins_lists = [[7], [1, 2, 5], [10], [49, 233, 96, 132, 188], 
                   [310, 278, 99, 326, 5, 575, 569, 15, 141, 54], 
                   [2823, 4551, 1750, 49, 3256, 405, 380, 4785, 3893, 874],
                   [17, 1422, 30, 1153, 1275], [1460], [9, 10, 11]]
    amounts = [9, 5, 10, 225, 350, 3200, 700, 2000, 0]

    # You can uncomment the lines below and check how this bottom-up solution executes without a timeout

    # Length of coins_list used here is 45
    
    # coins_lists.append([4021, 2158, 3577, 2157, 3928, 1229, 3888, 
    #                     1464, 56, 4945, 138, 3148, 699, 3001, 83, 
    #                     170, 4673, 941, 1539, 4904, 4118, 1953, 17, 
    #                     2963, 4406, 2359, 2363, 2288, 4147, 1070, 
    #                     4006, 3824, 467, 1785, 3365, 264, 3598, 
    #                     1132, 3093, 3634, 3122, 3618, 4545, 3256, 836])
    # amounts.append(5000)

    for i in range(len(amounts)):
        print(i+1, ".", "\tCoins: ", coins_lists[i], sep="")
        print("\tAmount: ", amounts[i], sep="")
        num_ways = count_ways(coins_lists[i], amounts[i])
        print("\tNumber of Ways: ", num_ways, sep="")
        print("-" * 100)
        print()

if __name__ == '__main__':
    main()