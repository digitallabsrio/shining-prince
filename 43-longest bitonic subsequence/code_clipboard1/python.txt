def lbs_length_helper(nums, curr, prev, is_decreasing, dp):

    if curr == len(nums): 
        return 0

    if(dp[curr][prev + 1][is_decreasing] != -1):
        return dp[curr][prev + 1][is_decreasing]

    # Base condition: If we're at the first element, we can make three choices
    # 1. Exclude the element in the subsequence
    # 2. Take the maximum length of including the element in either the increasing, or decreasing part of the subsequence
    # The maximum length of including, or excluding the element is selected
    if prev == -1:
        length1 = lbs_length_helper(nums, curr + 1, prev, is_decreasing, dp)

        length2 = max(1 + lbs_length_helper(nums, curr + 1, curr, is_decreasing, dp),
                      1 + lbs_length_helper(nums, curr + 1, curr, True, dp))

        length = max(length1, length2)

        dp[curr][prev + 1][is_decreasing] = length
        return dp[curr][prev + 1][is_decreasing]

    # If is_decreasing is false, we are in the increasing part of the subsequence, so we can make three choices again
    # 1. Exclude the element in the subsequence
    # 2. If nums[curr] > nums[prev], take the maximum length of including the element in either the increasing, or decreasing part of the subsequence
    # The maximum length of including, or excluding the element is selected
    if not is_decreasing:
        length1 = lbs_length_helper(nums, curr + 1, prev, is_decreasing, dp)
        length2 = 0

        if(nums[curr] > nums[prev]):
            
            length2 = max(1 + lbs_length_helper(nums, curr + 1, curr, is_decreasing, dp),
                          1 + lbs_length_helper(nums, curr + 1, curr, True, dp))
            
        dp[curr][prev + 1][is_decreasing] = max(length1, length2)
        
    # Otherwise, if is_decreasing is true, we are in the decreasing part of the subsequence, so we can make two choices
    # 1. Exclude the element in the subsequence
    # 2. If nums[curr] < nums[prev], take the maximum length of including, or excluding the element
    else:
        length = lbs_length_helper(nums, curr + 1, prev, is_decreasing, dp)
  
        if(nums[curr] < nums[prev]):
            length = max(length, 1 + lbs_length_helper(nums, curr + 1, curr, is_decreasing, dp))

        dp[curr][prev + 1][is_decreasing] = length

    return dp[curr][prev + 1][is_decreasing]


def lbs_length(nums):

    n = len(nums)
    dp = [[[-1 for k in range(3)] for j in range(n + 2)] for i in range(n + 2)]

    return lbs_length_helper(nums, 0, -1, False, dp)

# Driver code
def main():
    inputs = [[10], [1, 8], [2, 4, 1], [6, 5, 3, 7, 10, 1, 2], 
              [1, 4, 9, 2, 16, 20]]

    # You can uncomment the lines below and check how this recursive solution causes a time-out 
    # inputs.append([23, 11, 12, 10, 15, 12, 6, 15, 18, 4, 14, 2, 13, 25, 27, 21, 2, 17, 18, 30, 22, 25, 10, 27, 10, 22, 21, 24, 26, 12, 26, 12, 3, 16, 4, 20, 18, 1, 5, 12, 10, 1, 14, 21, 15, 17, 21, 18, 13, 30, 20, 10, 5, 16, 9, 4, 25, 10, 8, 15, 2, 1, 13, 9, 12, 13, 6, 28, 6, 26, 8, 20, 29, 9, 5, 14, 13, 30, 7, 3, 2, 24, 28, 21, 7, 19, 14, 22, 28, 2, 20, 8, 6, 27, 12, 8, 27, 2, 27, 30, 8, 23, 16, 27, 25, 3, 1, 3, 5, 18, 2, 13, 18, 28, 2, 25, 20, 5, 11, 2, 28, 15, 15, 12, 25, 24, 17, 30, 17, 7, 18, 23, 13, 4, 4, 23, 23, 18, 16, 18, 14, 11, 26, 26, 22, 21, 23, 24, 24, 25, 20, 28, 18, 17, 21, 14, 16, 8, 19, 23, 26, 24, 28, 18, 26, 9, 22, 14, 15, 1, 11, 23, 20, 16, 4, 16, 5, 30, 19, 18, 6, 14, 23, 2, 1, 22, 29, 3, 29, 22, 30, 10, 30, 12, 17, 3, 12, 22, 8, 22])

    for i in range(len(inputs)):
        print(i + 1, ".\t nums:",inputs[i],"\n\n\t", \
                          "The length of the longest bitonic subsequence is: ", lbs_length(inputs[i]))
                
        print("-" * 100)

if __name__ == '__main__':
    main()