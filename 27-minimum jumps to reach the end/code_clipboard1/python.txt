import math

def find_min_jumps(nums):
  # Initializing the lookup table of nums length
  lookup = [math.inf] * (len(nums))
  return find_min_jumps_memo(lookup, nums, 0)

def find_min_jumps_memo(lookup, nums, index):
  n = len(nums)
  # If we have reached the last index
  if (index >= n - 1):
      return 0

  # If we have already solved this problem, return the result
  if lookup[index] != math.inf:
    return lookup[index]

  # Initializing jumps with maximum value. It will store 
  # the minimum jumps required to reach the current index
  jumps = math.inf

  # Checking all the possible jumps
  for i in range(index + 1, index + nums[index] + 1):
    # Selecting the minimum jump
    jumps = min(jumps, find_min_jumps_memo(lookup, nums, i) + 1)
  
  # Storing the value in lookup table
  lookup[index] = jumps
  return lookup[index]

# Driver code
def main():
  inputs = [[7], [1, 0], [2, 3, 1, 1, 4], [2, 1, 1, 1, 4], [1, 1, 3, 6, 9, 3, 0, 1, 3]]

  # Let's uncomment this and check the effect of dynamic programming using memoization
  # inputs.append([2, 9, 4, 6, 1, 4, 7, 10, 0, 3, 9, 7, 4, 10, 5, 9, 3, 9, 7, 7, 10, 1, 8, 5, 9, 3, 1, 5, 9, 7, 7, 6, 3, 9, 7, 0, 1, 9, 9, 0, 9, 4, 9, 6, 2, 9, 3, 7, 6, 4])

  for i in range(len(inputs)):
      print(str(i + 1) + ". " + str(inputs[i]))
      print("Minimum jumps to reach the end:", find_min_jumps(inputs[i]))
      print("-" * 100, "\n", sep="")


if __name__ == "__main__":
  main()