# Helper function with updated signature: i is current index in nums
# sums1 is the sum of the first partitioned array
# sums2 is the sum of the second partitioned array
def minimum_partition_array_sum_difference_helper(nums, i, sum1, sum2, dp):
    # Base case: If i becomes equal to the length of nums, there are no more
    # elements left to add, so return the absolute difference between the
    # two sums
    if i == len(nums):
        return abs(sum1 - sum2)

    # If the 2-D array contains the default value of -1, update its value with the minimum of adding the current
    # array element to either the first, or second partitioned array
    if dp[i][sum1] == -1:

        dp[i][sum1] = min(
            minimum_partition_array_sum_difference_helper(
                nums, i + 1, sum1 + nums[i], sum2, dp
            ),
            minimum_partition_array_sum_difference_helper(
                nums, i + 1, sum1, sum2 + nums[i], dp
            ),
        )

    # Return the value stored in the 2-D array if the sub-problem has already been computed
    return dp[i][sum1]

def minimum_partition_array_sum_difference(nums):
    # Initializing the 2-D array
    dp = [[-1 for x in range(sum(nums) + 1)] for y in range(len(nums))]

    return minimum_partition_array_sum_difference_helper(nums, 0, 0, 0, dp)

# Driver code
def main():
    inputs = [[5, 4, 4, 7, 2, 9], [3, 25, 4, 12, 2], [3, 7, 4, 12, 2], 
  			  [1, 1, 1, 1000, 1], [45, 2, 9, 87, 9, 12, 54, 56]]

    # Let's uncomment this and check the effect of dynamic programming using memoization

    # inputs.append([4, 11, 15, 17, 18, 25, 26, 29, 32, 35, 37, 42, 43, 45, 46,
  	# 		       48, 49, 55, 62, 66, 67, 68, 70, 78, 83, 88, 92, 94, 96, 100])
  
    for i in range(len(inputs)):
        print(i + 1, ".\t nums:",inputs[i],"\n\n\t", \
                     "The minimum difference in sums between the partitioned arrays is:", minimum_partition_array_sum_difference(inputs[i]))
            
        print("-" * 100)

if __name__ == '__main__':
    main()