# Helper function with updated signature: i is current index in str1, j is current index in str2
def longest_common_subsequence_helper(str1, str2, i, j, dp): 
    # base case
    if i == len(str1) or j == len(str2): 
        return 0

    elif dp[i][j] != -1:
        return dp[i][j]

    # if current characters match, increment 1
    elif str1[i] == str2[j]:  
        dp[i][j] = 1 + longest_common_subsequence_helper(str1, str2, i+1, j+1, dp)
        return dp[i][j]
    
    # else take max of either of two possibilities
    dp[i][j] = max(longest_common_subsequence_helper(str1, str2, i+1, j, dp), 
                   longest_common_subsequence_helper(str1, str2, i, j+1, dp))
    return dp[i][j]

def longest_common_subsequence(str1, str2):
    n = len(str1)
    m = len(str2)
    dp = [[-1 for x in range(m)] for y in range(n)]
    return longest_common_subsequence_helper(str1, str2, 0, 0, dp)

# Driver code
def main():
    first_strings = ["qstw", "setter", "abcde", "partner", "freedom"]
    second_strings = ["gofvn", "bat", "apple", "park", "redeem"]

    # You can uncomment the lines below and check how this recursive solution causes a time-out 
    # first_strings.append("sjcneiurutvmpdkapbrcapjru")
    # second_strings.append("oidhfwepkxwebyurtunvidqlscmjbg")

    for i in range(len(first_strings)):
        print(i + 1, ".\t str1:",first_strings[i],"\n\t", \
                        "str2:", second_strings[i],"\n\n\t", \
                        "The length of the longest common subsequence is:", longest_common_subsequence(first_strings[i], second_strings[i])) \
                
        print("-" * 100)

if __name__ == '__main__':
    main()
    