def longest_common_subsequence(str1, str2):
    n = len(str1)   # length of str1
    m = len(str2)   # length of str2

    rows = n + 1
    cols = m + 1

    # Initializing the 2-D table, filling the first row and column with all 0s
    dp = [[0 if (i == 0 or j == 0) else -1 for i in range(cols)] for j in range(rows)]

    # Iterating to fill the table
    for i in range(1, rows):           
        # calculate new row (based on previous row i.e. dp)
        for j in range(1, cols):
            # if characters at this position match, 
            if str1[i-1] == str2[j-1]:    
                # add 1 to the previous diagonal and store it in this diagonal
                dp[i][j] = dp[i-1][j-1] + 1 
            else:
                # If the characters don't match, fill this entry with the max of the
                # left and top elements
                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
    return dp[n][m]

# Driver code
def main():
    first_strings = ["qstw", "setter", "abcde", "partner", "freedom"]
    second_strings = ["gofvn", "bat", "apple", "park", "redeem"]

    # Let's uncomment this to see the benefit of using dynamic programming with tabulation
    # first_strings.append("sjcneiurutvmpdkapbrcapjru")
    # second_strings.append("oidhfwepkxwebyurtunvidqlscmjbg")

    for i in range(len(first_strings)):
        print(i + 1, ".\t str1:",first_strings[i],"\n\t", \
                        "str2:", second_strings[i],"\n\n\t", \
                        "The length of the longest common subsequence is:", longest_common_subsequence(first_strings[i], second_strings[i])) \
                
        print("-" * 100)

if __name__ == '__main__':
    main()  