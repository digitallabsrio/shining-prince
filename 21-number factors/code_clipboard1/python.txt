# Available numbers are 1, 3, and 4
def count_ways_rec(n, memo):

    # Setting up our base cases
    # We can not get a negative target number at any point, 
    # so we return 0 for negative values
    if n < 0:
        return 0

    # There is only 1 way to reach a target number of 0, 
    # by not using any available numbers
    if n == 0:
        return 1

    if memo[n] == -1:
        # Recursively calculate the number of ways using the
        # recurrence relation and store in memo
        memo[n] = count_ways_rec(n - 1, memo) + count_ways_rec(n - 3, memo) + count_ways_rec(n - 4, memo)
    
    return memo[n]

def count_ways(n):

    # Initializing our solution array
    memo = [-1 for x in range(n+1)]

    # Set up the base case, 1 way to get to the number 0
    memo[0] = 1

    # Pass our array to the helper function
    return count_ways_rec(n, memo)

def main():
    target_numbers = [3, 5, 10, 25, 0]

    # You can uncomment the line below and check how this top-down solution executes without a time-out
    # target_numbers.append(50)

    for i in range(len(target_numbers)):
        num_ways = count_ways(target_numbers[i])
        print(i+1, ".", "\tNumber of ways to reach the target number ", target_numbers[i], ": ", num_ways, sep="")
        print("-" * 100)
        print()

if __name__ == '__main__':
    main()