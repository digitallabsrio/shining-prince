def count_subset_sum(nums, target_sum):
    nums_len = len(nums)
    # lookup table of size nums_len x (targetSum + 1)
    lookup = [[0 for i in range(target_sum + 1)] for j in range(nums_len)]

    # Base case 1
    if nums[0] == 0:
        lookup[0][0] = 2
    # Base case 2
    else: 
        lookup[0][0] = 1
        if nums[0] <= target_sum:
            lookup[0][nums[0]] = 1

    for current in range(1, nums_len):
        for required_sum in range(0, target_sum + 1):
            # included
            sum1 = 0
            if nums[current] <= required_sum:
                sum1 = lookup[current - 1][required_sum - nums[current]]
                
            # excluded
            sum2 = lookup[current - 1][required_sum]

            lookup[current][required_sum] = sum1 + sum2
    
    return lookup[nums_len - 1][target_sum]



def main():
    input_nums = [[1], [11, 33], [4, 2, 3], [1, 4, 2, 3], [1, 2, 7, 4, 5], [1, 2, 3, 7]]
    target_sums = [10, 11, 6, 4, 9, 6]

    # Let's uncomment this and check the effect of dynamic programming using tabulation

    # input_nums.append([1, 4, 6, 7, 8, 9, 10, 11, 16, 17, 18, 21, 23, 25, 26, 28, 34,
    #     35, 36, 38, 39, 40, 41, 42, 44, 47, 50, 51, 54, 55, 61, 62, 63, 65, 69, 71, 72, 
    #     73, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 98, 99, 100, 
    #     101, 103, 104, 106, 109, 116, 118, 119])
    # target_sums.append(2593)

    for i in range(len(input_nums)):
        print(str(i + 1) + ".\tnums = " + str(input_nums[i]))
        print("\ttarget_sum =", target_sums[i])
        print("\tTotal number of subsets whose sum is equal to the target sum =", count_subset_sum(input_nums[i], target_sums[i]))
        print("-"*100)


if __name__ == '__main__':
    main()