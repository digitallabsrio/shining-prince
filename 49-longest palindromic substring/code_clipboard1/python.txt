def find_lps_length(s):
    length = len(s)
    dp = [[-1 for _ in range(length)] for _ in range(length)]
    return find_lps_length_recursion(dp, s, 0, length - 1)

def find_lps_length_recursion(dp, s, start, end):
    # if both pointers are pointing to the same index
    if start==end:
        return 1

    if dp[start][end] == -1:    

        # the characters at the start and end indexes match
        if s[start]==s[end]:
            substring_length = end - start + 1
            
            # if the substring length is 2 and it's also a palindrome
            if substring_length == 2:
                return 2
            
            # check whether the remaining string is a palindrome
            if substring_length == 2 + find_lps_length_recursion(dp, s, start+1, end-1):
                dp[start][end] = substring_length
                return dp[start][end]
        
        # skip one element either from the beginning or end and select the maximum resultant value
        dp[start][end] = max(find_lps_length_recursion(dp, s, start+1, end), find_lps_length_recursion(dp, s, start, end-1))

    return dp[start][end]    


# Driver code
def main():
    strings = ['abcbda', 'tworacecars', 'pqrssrqp', 'mnop', 'bbbbbbbbbbbbbbbbbbbb']
    
    # Let's uncomment this and check the effect of dynamic programming using memoization
    # strings.append('mwusjunybvgafxuhloqwfoizqkkqzilltjw')
    
    for i in range(len(strings)):
        print(i + 1, ".\t Input string: '", strings[i], "'", sep="")
        result = find_lps_length(strings[i])
        print("\t Length of the longest palindromic substring: ", result, sep="")
        print("-" * 100)
    

if __name__ == '__main__':
    main()