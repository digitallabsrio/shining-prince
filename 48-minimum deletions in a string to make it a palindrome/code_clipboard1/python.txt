def minimum_deletions(s):
    length = len(s)
    return length - longest_palindromic_subsequence(s)

# Returns the LPS
def longest_palindromic_subsequence(s):
    # Initializing a lookup table of dimensions len(s) x len(s)
    lookup_table = [[0 for x in range(len(s))] for x in range(len(s))]
    return longest_palindromic_subsequence_recursive(lookup_table, s, 0, len(s) - 1)

def longest_palindromic_subsequence_recursive(lookup_table, s, start, end):
    if start > end:
        return 0

    # Every sequence with one element is a palindrome of length 1
    if start == end:
        return 1

    if lookup_table[start][end] == 0:
        # case 1: elements at the beginning and the end are the same
        if s[start] == s[end]:
            lookup_table[start][end] = 2 + longest_palindromic_subsequence_recursive(lookup_table, s, start + 1, end - 1)
        else:
            # case 2: skip one element either from the beginning or the end
            c1 = longest_palindromic_subsequence_recursive(lookup_table, s, start + 1, end)
            c2 = longest_palindromic_subsequence_recursive(lookup_table, s, start, end - 1)
            lookup_table[start][end] = max(c1, c2)

    return lookup_table[start][end]

# Driver code
def main():
    strings=['raddar', 'lleveal','aqwrqhanisahinahqwe','pqr']

    # Let's uncomment this and check the effect of dynamic programming using memoization

    # strings.append('aeqirradarqwruirrraaadddaqweraarrr')
    
    for i in range(len(strings)):
        print(i+1, ". The minimum deletions required to make '", strings[i] , "' a palindrome is: ", minimum_deletions(strings[i]), sep="")
        print("-"*100)

if __name__ == '__main__':
    main()