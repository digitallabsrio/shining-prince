def lcs_length(s1, s2):
  n = len(s1)   # length of s1
  m = len(s2)   # length of s2

  dp = [[0 for j in range(m+1)] for i in range(n+1)]  # table for tabulation of size m x n
  max_length = 0   # to keep track of longest substring seen 

  for i in range(1, n+1):           # iterating to fill table
    for j in range(1, m+1):
      if s1[i-1] == s2[j-1]:    # if characters at this position match, 
        dp[i][j] = dp[i-1][j-1] + 1 # add 1 to the previous diagonal and store it in this diagonal
        max_length = max(max_length, dp[i][j])  # if this substring is longer, update max_length
      else:
        dp[i][j] = 0 # if character don't match, common substring size is 0
  return max_length

# Driver code
def main():
    s1 = ["educative", "bcdcdcd", "arefun", "yourocks", "abc"]
    s2 = ["education", "aacdcdcd", "isfun", "youawesome", "def"]
    
    # Let's uncomment this to see the benefit of using dynamic programming with tabulation
    # s1.append("ypzrvyigwdiqrnbglvviozqzruvmwivgvqvrfhqi")
    # s2.append("wdiqrnbglvviozqzruvmwivgvqvrfhqiypzrvyigwdiqrn")

    for i in range(0, len(s1)):
        print(i+1, ".\tString 1: \"",s1[i], "\" \n\tString 2: \"",s2[i], "\"", sep="")
        result = lcs_length(s1[i], s2[i])
        print("\n\tThe Length of Longest Common Substring is: ", result, sep="")
        print("-"*100, "\n", sep="")


if __name__ == '__main__':
    main()