import math

def count_ribbon_pieces(n, sizes):
  length = len(sizes)
  # we created a table here
  dp = [[-1 for _ in range(n+1)] for _ in range(length)]

  result = count_ribbon_pieces_helper(sizes, n, 0, dp)
  
  if result == -1:
    return -1
  else:
    return result


def count_ribbon_pieces_helper(sizes, n, index, dp):
  # base case
  if n == 0:
    return 0

  length = len(sizes)
  # if the length is zero or the index is greater than or equal to the length,
  # then return -1 as the ribbon cannot be cut further.
  if length == 0 or index >= length:
    return -1

  if dp[index][n] == -1:
    # recursive call after selecting the ribbon length at the index
    # if the ribbon length at the index exceeds the n, we shouldn't process this
    # since ribbon length is always positive, therefore initializing c1 with -1
    c1 = -1
    if sizes[index] <= n:
      res = count_ribbon_pieces_helper(sizes, n-sizes[index], index, dp)
      if(res != -1):
        # recursive call after excluding the ribbon length at the index
        c1 = res + 1
    
    c2 = count_ribbon_pieces_helper(sizes, n, index+1, dp)
    dp[index][n] = max(c1, c2)

  return dp[index][n]

def main():
    sizes = [[1, 2, 3], [3, 2, 5], [2, 3], [3, 5, 7], [5, 3]]
    n = [5, 5, 7, 13, 7]

    # Let's uncomment this and check the effect of dynamic programming using memoization  

    # sizes.append([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])
    # n.append(1500)

    for i in range(len(n)):
        print(str(i+1) + ".\tThe maximum number of sizes that can make up the n of " + \
                    str(n[i]) + " from " + str(sizes[i]) + " is: " + \
                            str(count_ribbon_pieces(n[i], sizes[i])))
        print("-" * 100)

if __name__ == '__main__':
    main()