
# function to find the maximum number of matching characters subsequence
def find_max_matching_subseq(str1, str2, i, j): 
    # base case
    if i == len(str1) or j == len(str2): 
        return 0

    # if current characters match, increment by 1
    elif str1[i] == str2[j]:  
        return 1 + find_max_matching_subseq(str1, str2, i+1, j+1)
    
    # else return max of either of two possibilities
    return max(find_max_matching_subseq(str1, str2, i+1, j), find_max_matching_subseq(str1, str2, i, j+1))


def min_del_ins(str1, str2):
  n = find_max_matching_subseq(str1, str2, 0, 0)
  # calculating number of deletions required from str1 to transform it into str2
  deletions = len(str1) - n
  # calculating number of insertions required in str1 to transform it into str2
  insertions = len(str2) - n

  return deletions,insertions
 


# Driver code to test the above function
if __name__ == '__main__':
    str1_list = ["pqr", "heap", "passport", "baller", "sam","bed"]
    str2_list = ["tqr", "pea", "ppsspt", "ball", "samson","read"]

    # You can uncomment the lines below and check how this recursive solution causes a time-out 
    # str1_list.append("sjcneiurutvmpdkapbrcapjru")
    # str2_list.append("oidhfwepkxwebyurtunvidqlscmjbg")

    for i in range(len(str1_list)):
        print(i + 1, ".\tstr1: ", str1_list[i], sep="")
        print("\tstr2:", str2_list[i])
        deletions,insertions = min_del_ins(str1_list[i], str2_list[i])
        print("\n\tMinimum deletions required:  " , deletions)
        print("\tMinimum insertions required: " , insertions)
        print('-' * 100)
    