def longest_palindromic_subsequence(s):
    return longest_palindromic_subsequence_recursive(s, 0, len(s) - 1)

def longest_palindromic_subsequence_recursive(s, start_index, end_index):
    if start_index > end_index:
        return 0

    # Every sequence with one element is a palindrome of length 1
    if start_index == end_index:
        return 1

    # Case 1: elements at the beginning and the end are the same
    if s[start_index] == s[end_index]:
        return 2 + longest_palindromic_subsequence_recursive(s, start_index + 1, end_index - 1)

    # Case 2: skip one element either from the beginning or the end
    c1 = longest_palindromic_subsequence_recursive(s, start_index + 1, end_index)
    c2 = longest_palindromic_subsequence_recursive(s, start_index, end_index - 1)
    return max(c1, c2)




# Driver code to test the above function
if __name__ == '__main__':
    strings=['cddpd', 'abdbca','racecar','pqr']

    # You can uncomment the lines below and check how this recursive solution causes a time-out
    
    # strings.append('aeqirradarqwruirrraaadddaqweraarrr')
    
    for i in range(len(strings)):
        print(str(i+1)+". The length of the longest palindromic subsequence in '", strings[i] ,"' is: ",longest_palindromic_subsequence(strings[i]), sep="")
        print("-"*100)