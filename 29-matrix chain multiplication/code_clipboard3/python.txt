import math

def min_multiplications(dims):
    
    # Table for tabulation
    dp = [[0 for _ in range(len(dims))] for _ in range(len(dims))]

    # Iterating to fill table
    for l in range(2,len(dims)):
        for i in range(1,len(dims)-l+1):
            j = i+l-1
            dp[i][j] = math.inf
            for k in range(i, j):
                temp = dp[i][k]+ dp[k+1][j] + dims[i-1]*dims[k]*dims[j] 
                if temp < dp[i][j]:
                    dp[i][j] = temp # Storing the minimum value
    return dp[1][-1]

# Driver code
def main():
    dims = [[3, 3, 2, 1], [4, 3, 2, 1], [2, 2, 2], [1, 1, 1], [13, 16, 11, 99, 3]]

    # Let's uncomment this to see the benefit of using dynamic programming with tabulation
    # dims.append([13, 16, 11, 99, 3, 13, 16, 11, 99, 3, 13, 16, 11, 99, 3, 13, 16, 11, 99, 3, 13, 16, 11, 99, 3, 13, 16, 11, 99, 3])

    for i in range(len(dims)):
        print(i+1, ".\tInput dims: ", dims[i] , sep="")
        result = min_multiplications(dims[i])
        print("\n\tThe least number of primitive multiplications possible: ", result, sep="")
        print("-"*100, "\n", sep="")


if __name__ == '__main__':
    main()