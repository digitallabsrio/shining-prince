def find_unique_path(matrix):
    rows = len(matrix)
    cols = len(matrix[0])

    # If the starting cell has an obstacle, then return 0 
    # as there would be no paths to the destination.
    if matrix[0][0] == 1:
        return 0

    # Number of ways of reaching the starting cell = 1.
    matrix[0][0] = 1

    # Fill the values for the first column
    for i in range(1, rows):
        matrix[i][0] = int(matrix[i][0] == 0 and matrix[i-1][0] == 1)

    # Fill the values for the first row        
    for j in range(1, cols):
        matrix[0][j] = int(matrix[0][j] == 0 and matrix[0][j-1] == 1)

    # Start from matrix[1][1], we fill up the values.
	# The number of ways of reaching matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1]
    for i in range(1, rows):
        for j in range(1, cols):
            if matrix[i][j] == 0:
                matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]
            else:
                matrix[i][j] = 0

    # Return value stored in rightmost bottommost cell. 
	# That is the destination.
    return matrix[rows - 1][cols - 1]

# Driver code
def main():
    inputs = [
    [[0,1], [0,0]],
		[[0,0,0], [0,0,0], [0,0,0]],
		[[0,0,0], [0,1,0], [0,0,0]],
		[[0,0,0], [1,1,1], [0,0,0]],
    [[0,0,0,0],[1,0,1,0],[1,0,0,0],[0,1,0,0]]
	]
    
    # Let's uncomment this to see the benefit of using dynamic programming with tabulation
    
    # inputs.append([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])



    for i in range(len(inputs)):
        print(i + 1, ".\t Matrix:",inputs[i])
        print("\n\n\t","Number of unique paths:", find_unique_path(inputs[i])) 
        print("-" * 95)
    
if __name__ == '__main__':
    main()
    