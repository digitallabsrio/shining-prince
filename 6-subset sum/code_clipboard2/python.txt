def subset_sum(arr, total): # main function
    n = len(arr)
    dp = [[False for i in range(total + 1)] for j in range(n + 1)]

    # Bases cases
    for i in range (n):
        for j in range(total):
            if i == 0:
                dp[i][j] = False

            if j == 0:
                dp[i][j] = True

    # solving for the total 
    for i in range(1, n + 1):
        for j in range(1, total + 1):
            # if last element is greater than total we exclude it
            if arr[i-1] > j:
                dp[i][j] = dp[i-1][j]
            else:
                # otherwise we proceed on to rest of the elements
                # we either exclude the element or include the element
                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]
    
    return dp[n][total]


def main():
    input_arr = [[3, 5, 8], [2, 4, 7], [2, 3, 5], [1, 2, 3, 7], [10, 20, 23, 34]]
    total = [13, 8, 5, 6, 57]

    # You can uncomment the lines below and check how this recursive solution causes a time-out 

    # input_arr.append([0, 1, 4, 6, 7, 8, 9, 10, 11, 16, 17, 18, 21, 23, 25, 26, 28, 34,
    #     35, 36, 38, 39, 40, 41, 42, 44, 47, 50, 51, 54, 55, 61, 62, 63, 65, 69, 71, 72, 
    #     73, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 98, 99, 100, 
    #     101, 103, 104, 106, 109, 116, 118, 119])
    # total.append(2593)

    for i in range(len(input_arr)):
        print(str(i + 1) + ".\tDoes a subset of " + str(input_arr[i]) + " sum up to " + str(total[i]) + "?   ", "Yes." if subset_sum(input_arr[i], total[i]) else "No.")
        print("-"*100)

if __name__ == '__main__':
    main()